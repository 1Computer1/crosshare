rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAdmin() {
      return request.auth.token.admin;
    }
    function isNonAnonymous() {
      return request.auth.token.firebase.sign_in_provider != 'anonymous';
    }
    match /{document=**} {
      allow read, write: if false;
    }
    function isAuthor() {
      return request.auth.uid != null && request.auth.uid == resource.data.a;
    }
    function authorSetCorrectly() {
      return request.auth.uid != null && request.auth.uid == request.resource.data.a;
    }
    function validCrossword() {
      return (request.resource.data.g.size() == (request.resource.data.w * request.resource.data.h))
        && (request.resource.data.ac.size() == request.resource.data.an.size())
        && (request.resource.data.dc.size() == request.resource.data.dn.size())
        && (!request.resource.data.keys().hasAny(["cs"]) || request.resource.data.cs.size() == 0);
    }
    match /cp/{username} {
      allow get: if true;
      allow list: if true;
      allow update: if isAdmin();
    }
    match /c/{crosswordId} {
      allow get: if true;

      // Account page
      allow list: if isAdmin() || isAuthor();

      // This supports the homepage 'featured puzzles' list and author pages
      allow list: if request.query.limit <= 30;

      allow update: if isAdmin();

      allow create: if isNonAnonymous() && authorSetCorrectly()
        && validCrossword()
        && request.resource.data.m == false
        && (!request.resource.data.keys().hasAny(["f"]) || request.resource.data.f == false)
        && request.resource.data.c == null
        && request.time >= request.resource.data.p;
    }
    match /uc/{userId} {
      allow read: if request.auth.uid == userId;
      allow write: if request.auth.uid == userId;
    }
    match /up/{userId} {
      allow read: if request.auth.uid == userId;
      allow write: if request.auth.uid == userId;
    }
    match /p/{playId} {
      allow read: if request.auth.uid != null
        && (resource == null || request.auth.uid == resource.data.u);

      allow write: if request.auth.uid != null
        && request.auth.uid == request.resource.data.u
        && playId == (request.resource.data.c + '-' + request.resource.data.u);

      allow delete: if request.auth.uid != null
        && request.auth.uid == resource.data.u;
    }
    match /s/{crosswordId} {
      allow read: if isAdmin() || request.auth.uid == resource.data.a;
    }
    match /ds/{dateString} {
      allow read: if isAdmin();
    }
    match /categories/{category} {
      allow get: if true;
      allow write: if isAdmin();
    }
    match /cfm/{commentId} {
      allow write: if request.auth.uid != null
        && isNonAnonymous()
        && request.auth.uid == request.resource.data.a
        && (
          !request.resource.data.keys().hasAny(["un"]) ||
          get(/databases/$(database)/documents/cp/$(request.resource.data.un.lower())).data.u == request.auth.uid
        );
      allow read: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}
